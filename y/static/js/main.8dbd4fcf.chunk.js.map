{"version":3,"sources":["components/Header.js","components/Profile.js","components/Note.jsx","components/NoteForm.jsx","components/config.js","components/App.js","components/Rating.js","components/Main.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Profile","Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","noteContent","noteId","NoteForm","state","newNoteContent","handleUserInput","bind","assertThisInitialized","writeNote","e","setState","target","value","addNote","placeholder","onChange","onClick","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","uiConfig","signInFlow","signInOptions","firebase","auth","GoogleAuthProvider","PROVIDER_ID","GithubAuthProvider","EmailAuthProvider","callbacks","signinSucess","componentDidMount","onAuthStateChanged","user","isSignedIn","app","initializeApp","database","ref","child","notes","_this2","previousNotes","on","snap","push","id","key","val","note","set","class","currentUser","displayName","signOut","reactstrap_es","top","width","src","alt","map","components_Note","components_NoteForm","authButtons","StyledFirebaseAuth_default","firebaseAuth","Main","components_Header","components_App","Switch","Route","path","component","Boolean","window","location","hostname","match","render","BrowserRouter","components_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8dbd4fcf.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../css/Header.css';\n\nclass Header extends Component{\n  render() {\n      return(\n        <div className = \"App-header\">\n          <h2> CoRate </h2>\n        </div>\n      )\n  }\n\n\n}\nexport default Header;\n","import React, {Component} from 'react';\n\nclass Profile extends Component{\n  render() {\n      return(\n        <div>\n          <h2> Profile page </h2>\n          \n        </div>\n      )\n  }\n\n\n}\nexport default Profile;\n","import React, { Component } from 'react';\n import '../css/Note.css';\nimport PropTypes from 'prop-types';\n\nclass Note extends Component{\n\n    constructor(props){\n        super(props);\n        this.noteContent = props.noteContent; \n        this.noteId = props.noteId; \n        // this.handleRemoveNote = this.handleRemoveNote.bind(this);\n    }\n\n    // handleRemoveNote(id){\n    //     this.props.removeNote(id);\n    // }\n\n    render(){\n        return(\n            <div className=\"note fade-in\">\n                {/* <span className=\"closebtn\" \n                      onClick={() => this.handleRemoveNote(this.noteId)}>\n                      &times;\n                </span> */}\n                <p className=\"noteContent\">{ this.noteContent }</p>\n            </div>\n        )\n    }\n}\n\nNote.propTypes = {\n    noteContent: PropTypes.string\n}\n\nexport default Note;","import React, { Component } from 'react';\n import '../css/NoteForm.css';\n\nclass NoteForm extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            newNoteContent: '',\n        };\n\n        this.handleUserInput = this.handleUserInput.bind(this);\n        this.writeNote = this.writeNote.bind(this);\n    }\n\n    // When the user input changes, set the newNoteContent\n    // to the value of what's in the input box.\n    handleUserInput(e){\n        this.setState({\n            newNoteContent: e.target.value, // the value of the text input\n        })\n    }\n\n    writeNote(){\n        // call a method that sets the noteContent for a note to\n        // the value of the input\n        this.props.addNote(this.state.newNoteContent);\n\n        // Set newNoteContent back to an empty string.\n        this.setState({\n            newNoteContent: '',\n        })\n    }\n\n    render(){\n        return(\n            <div className=\"formWrapper\">\n                <input className=\"noteInput\"\n                placeholder=\"Say something \"\n                value={this.state.newNoteContent} \n                onChange={this.handleUserInput} />\n                <button className=\"noteButton\"\n                onClick={this.writeNote}>Submit</button>\n            </div>\n        )\n    }\n}\n\nexport default NoteForm;","// Initialize Firebase\n  export const DB_CONFIG = {\n    apiKey: \"AIzaSyAb3DecniPkMErcRr2GebYvigm_giFi7YE\",\n    authDomain: \"corate-4b30a.firebaseapp.com\",\n    databaseURL: \"https://corate-4b30a.firebaseio.com\",\n    projectId: \"corate-4b30a\",\n    storageBucket: \"corate-4b30a.appspot.com\",\n    messagingSenderId: \"133869785706\"\n  };\n","import React, { Component } from 'react';\nimport '../css/App.css';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\nimport Header from './Header';\nimport Rating from './Rating';\nimport Main from './Main';\nimport {Link } from 'react-router-dom';\n\nimport { Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle, Button } from 'reactstrap';\n\n  import Note from './Note';\n  import NoteForm from './NoteForm';\n  import { DB_CONFIG } from './config';\n  import 'firebase/database';\n\n\n\nclass App extends Component {\n\n\nconstructor(props){\n  super(props);\n  this.addNote = this.addNote.bind(this);\n  \n\n  this.app = firebase.initializeApp(DB_CONFIG);\n  this.database = this.app.database().ref().child('comment');\n\n  \n  this.state = {\n    notes: [],\n  }\n}\ncomponentWillMount(){\n  const previousNotes = this.state.notes;\n\n  \n  this.database.on('child_added', snap => {\n    previousNotes.push({\n      id: snap.key,\n      noteContent: snap.val().noteContent,\n    })\n\n    this.setState({\n      notes: previousNotes\n    })\n  })\n\n  \n}\n\naddNote(note){\n  this.database.push().set({ noteContent: note});\n}\n\n\n\n  uiConfig = {\n  signInFlow: \"popup\",\n  signInOptions: [\n     firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n     firebase.auth.GithubAuthProvider.PROVIDER_ID,\n     firebase.auth.EmailAuthProvider.PROVIDER_ID\n  ],\n  callbacks: {\n    signinSucess: () => false\n  }\n  }\n\n  componentDidMount = ()=>{\n    firebase.auth().onAuthStateChanged(user =>{\n      this.setState({isSignedIn:!!user})\n    })\n  }\n  render() {\n    return (\n      <div className = \"App\">\n      {this.state.isSignedIn ? (\n        <div class = \"content\">\n          <h1 class = \"greeting\"> Welcome {firebase.auth().currentUser.displayName}</h1>\n          <button onClick={() => firebase.auth().signOut()}> Sign out! </button>\n          {/* <Rating/> */}\n\n          <Card>\n        <CardImg top width=\"25%\" src=\"https://www.lifewire.com/thmb/L-aLC8zjGWcu-ROZWlsbm0icK0Y=/1600x900/filters:no_upscale():fill(FFCC00,1)/Aliens-5ad4ee9231283400363d13c4.jpg\" alt=\"Card image cap\" />\n        <CardBody>\n          <CardTitle>John Smith</CardTitle>\n          <CardSubtitle>Extraterrestrial Scientist</CardSubtitle>\n          <CardText>Astronomy Department</CardText>\n          \n          {/* <Link to=\"/Profile\">\n          <button > Rate Me! </button>\n          </Link> */}\n\n          <div className=\"notesWrapper\">\n        <div className=\"notesHeader\">\n        </div>\n        <div className=\"notesBody\">\n          {\n            this.state.notes.map((note) => {\n              return (\n                <Note noteContent={note.noteContent} \n                noteId={note.id} \n                key={note.id} \n                />\n              )\n            })\n          }\n        </div>\n        <div className=\"notesFooter\">\n          <NoteForm addNote={this.addNote} />\n        </div>\n      </div>\n          \n        </CardBody>\n      </Card>\n          \n        </div>\n      ) : (\n        <div authButtons>\n        <StyledFirebaseAuth\n          uiConfig={this.uiConfig}\n          firebaseAuth={firebase.auth()}\n          />\n          </div>\n      )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport Profile from './Profile';\nimport {Link } from 'react-router-dom';\n\nimport { Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle, Button } from 'reactstrap';\n\n  import Note from './Note';\n  import NoteForm from './NoteForm';\n  import { DB_CONFIG } from './config';\n  import firebase from 'firebase/app';\n  import 'firebase/database';\n  \n\nclass Rating extends Component{\n  render() {\n      return(\n        <div className =\"tunechi\">\n        <Card>\n        <CardImg top width=\"25%\" src=\"https://imgflip.com/s/meme/Bad-Luck-Brian.jpg\" alt=\"Card image cap\" />\n        <CardBody>\n          <CardTitle>Brian Luk</CardTitle>\n          <CardSubtitle>President</CardSubtitle>\n          <CardText>In search for better luck.</CardText>\n          \n          {/* <Link to=\"/Profile\">\n          <button > Rate Me! </button>\n          </Link> */}\n\n          \n          \n        </CardBody>\n      </Card>\n\n      \n        </div>\n      )\n  }\n}\n\nexport default Rating;\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport App from './App'\nimport Header from './Header'\nimport Profile from './Profile'\n\n\n\nconst Main = () => (\n  <div>\n  <Header />\n  <App />\n  <Switch>\n    <Route  path=\"/Profile\" component={Profile} />\n  </Switch>\n  \n \n  </div>\n)\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport Main from './components/Main';\nimport * as serviceWorker from './serviceWorker';\nimport { render } from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport 'react-mdl/extra/material.css'\nimport 'react-mdl/extra/material.js'\n\nrender((\n  <BrowserRouter>\n    <Main />\n  </BrowserRouter>), document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}